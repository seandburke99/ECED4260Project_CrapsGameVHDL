|CrapsGame
roll => iLoss.IN1
roll => iWin.IN1
roll => RollCounter:SR.x
roll => clock.IN0
reset => RollCounter:SR.rst
reset => PointRegister:PR.reset
reset => DFlipFlop:LD.reset
reset => DFlipFlop:WD.reset
clk => clock.IN1
win << DFlipFlop:WD.q
loss << DFlipFlop:LD.q
disp0[0] << sevenSegEncoder:S0.y[0]
disp0[1] << sevenSegEncoder:S0.y[1]
disp0[2] << sevenSegEncoder:S0.y[2]
disp0[3] << sevenSegEncoder:S0.y[3]
disp0[4] << sevenSegEncoder:S0.y[4]
disp0[5] << sevenSegEncoder:S0.y[5]
disp0[6] << sevenSegEncoder:S0.y[6]
disp1[0] << sevenSegEncoder:S1.y[0]
disp1[1] << sevenSegEncoder:S1.y[1]
disp1[2] << sevenSegEncoder:S1.y[2]
disp1[3] << sevenSegEncoder:S1.y[3]
disp1[4] << sevenSegEncoder:S1.y[4]
disp1[5] << sevenSegEncoder:S1.y[5]
disp1[6] << sevenSegEncoder:S1.y[6]
rc[0] << RollCounter:SR.y[0]
rc[1] << RollCounter:SR.y[1]
dpr[0] << PointRegister:PR.y[0]
dpr[1] << PointRegister:PR.y[1]
dpr[2] << PointRegister:PR.y[2]
dpr[3] << PointRegister:PR.y[3]


|CrapsGame|Counter:C0
clk => DFlipFlop:U1.clk
clk => DFlipFlop:U2.clk
clk => DFlipFlop:U3.clk
y[0] <= DFlipFlop:U1.q
y[1] <= DFlipFlop:U3.q
y[2] <= DFlipFlop:U2.q


|CrapsGame|Counter:C0|DFlipFlop:U1
d => q~reg0.DATAIN
clk => q~reg0.CLK
reset => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE
qbar <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|Counter:C0|DFlipFlop:U2
d => q~reg0.DATAIN
clk => q~reg0.CLK
reset => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE
qbar <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|Counter:C0|DFlipFlop:U3
d => q~reg0.DATAIN
clk => q~reg0.CLK
reset => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE
qbar <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|Counter:C0|Mux_2:SMUX
Input[0] => andSel[0].IN0
Input[1] => andSel[1].IN0
Sel => andSel[1].IN1
Sel => andSel[0].IN1
Output <= Output.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|DFlipFlop:FD
d => q~reg0.DATAIN
clk => q~reg0.CLK
reset => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE
qbar <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|Counter:C1
clk => DFlipFlop:U1.clk
clk => DFlipFlop:U2.clk
clk => DFlipFlop:U3.clk
y[0] <= DFlipFlop:U1.q
y[1] <= DFlipFlop:U3.q
y[2] <= DFlipFlop:U2.q


|CrapsGame|Counter:C1|DFlipFlop:U1
d => q~reg0.DATAIN
clk => q~reg0.CLK
reset => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE
qbar <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|Counter:C1|DFlipFlop:U2
d => q~reg0.DATAIN
clk => q~reg0.CLK
reset => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE
qbar <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|Counter:C1|DFlipFlop:U3
d => q~reg0.DATAIN
clk => q~reg0.CLK
reset => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE
qbar <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|Counter:C1|Mux_2:SMUX
Input[0] => andSel[0].IN0
Input[1] => andSel[1].IN0
Sel => andSel[1].IN1
Sel => andSel[0].IN1
Output <= Output.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|sevenSegEncoder:S0
x[0] => y.IN0
x[0] => y.IN0
x[0] => y.IN0
x[0] => y.IN0
x[1] => y.IN1
x[1] => y.IN0
x[1] => y.IN1
x[1] => y.IN1
x[1] => y.IN1
x[2] => y.IN1
x[2] => y.IN1
x[2] => y.IN1
x[2] => y.IN1
x[2] => y[5].DATAIN
y[0] <= y.DB_MAX_OUTPUT_PORT_TYPE
y[1] <= y.DB_MAX_OUTPUT_PORT_TYPE
y[2] <= y.DB_MAX_OUTPUT_PORT_TYPE
y[3] <= y.DB_MAX_OUTPUT_PORT_TYPE
y[4] <= y.DB_MAX_OUTPUT_PORT_TYPE
y[5] <= x[2].DB_MAX_OUTPUT_PORT_TYPE
y[6] <= y.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|sevenSegEncoder:S1
x[0] => y.IN0
x[0] => y.IN0
x[0] => y.IN0
x[0] => y.IN0
x[1] => y.IN1
x[1] => y.IN0
x[1] => y.IN1
x[1] => y.IN1
x[1] => y.IN1
x[2] => y.IN1
x[2] => y.IN1
x[2] => y.IN1
x[2] => y.IN1
x[2] => y[5].DATAIN
y[0] <= y.DB_MAX_OUTPUT_PORT_TYPE
y[1] <= y.DB_MAX_OUTPUT_PORT_TYPE
y[2] <= y.DB_MAX_OUTPUT_PORT_TYPE
y[3] <= y.DB_MAX_OUTPUT_PORT_TYPE
y[4] <= y.DB_MAX_OUTPUT_PORT_TYPE
y[5] <= x[2].DB_MAX_OUTPUT_PORT_TYPE
y[6] <= y.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|Adder:A
a[0] => FAdder:FA0.a
a[1] => FAdder:FA1.a
a[2] => FAdder:FA2.a
b[0] => FAdder:FA0.b
b[1] => FAdder:FA1.b
b[2] => FAdder:FA2.b
y[0] <= FAdder:FA0.y
y[1] <= FAdder:FA1.y
y[2] <= FAdder:FA2.y
y[3] <= FAdder:FA2.cout


|CrapsGame|Adder:A|FAdder:FA0
a => y.IN0
a => cout.IN0
a => cout.IN0
b => y.IN1
b => cout.IN1
b => cout.IN0
cin => y.IN1
cin => cout.IN1
cin => cout.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE
cout <= cout.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|Adder:A|FAdder:FA1
a => y.IN0
a => cout.IN0
a => cout.IN0
b => y.IN1
b => cout.IN1
b => cout.IN0
cin => y.IN1
cin => cout.IN1
cin => cout.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE
cout <= cout.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|Adder:A|FAdder:FA2
a => y.IN0
a => cout.IN0
a => cout.IN0
b => y.IN1
b => cout.IN1
b => cout.IN0
cin => y.IN1
cin => cout.IN1
cin => cout.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE
cout <= cout.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|RollCounter:SR
x => DFlipFlop:U2.clk
x => DFlipFlop:U1.clk
rst => DFlipFlop:U2.reset
rst => DFlipFlop:U1.reset
y[0] <= DFlipFlop:U1.q
y[1] <= DFlipFlop:U2.q


|CrapsGame|RollCounter:SR|DFlipFlop:U2
d => q~reg0.DATAIN
clk => q~reg0.CLK
reset => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE
qbar <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|RollCounter:SR|DFlipFlop:U1
d => q~reg0.DATAIN
clk => q~reg0.CLK
reset => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE
qbar <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|Comparator7:CMP7
a[0] => y.IN0
a[1] => y.IN1
a[2] => y.IN1
a[3] => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|Comparator11:CMP11
a[0] => y.IN0
a[1] => y.IN1
a[2] => y.IN1
a[3] => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|Comparator2312:CMP2312
a[0] => y.IN0
a[0] => y.IN0
a[0] => y.IN0
a[1] => y.IN1
a[1] => y.IN1
a[1] => y.IN1
a[2] => y.IN1
a[2] => y.IN1
a[2] => y.IN1
a[3] => y.IN1
a[3] => y.IN1
a[3] => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|ComparatorPR:CMPPR
a[0] => y.IN0
a[1] => y.IN0
a[2] => y.IN0
a[3] => y.IN0
b[0] => y.IN1
b[1] => y.IN1
b[2] => y.IN1
b[3] => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|PointRegister:PR
x[0] => DFlipFlop:U1.d
x[1] => DFlipFlop:U2.d
x[2] => DFlipFlop:U3.d
x[3] => DFlipFlop:U4.d
rollReg => DFlipFlop:U1.clk
rollReg => DFlipFlop:U2.clk
rollReg => DFlipFlop:U3.clk
rollReg => DFlipFlop:U4.clk
reset => DFlipFlop:U1.reset
reset => DFlipFlop:U2.reset
reset => DFlipFlop:U3.reset
reset => DFlipFlop:U4.reset
y[0] <= DFlipFlop:U1.q
y[1] <= DFlipFlop:U2.q
y[2] <= DFlipFlop:U3.q
y[3] <= DFlipFlop:U4.q


|CrapsGame|PointRegister:PR|DFlipFlop:U1
d => q~reg0.DATAIN
clk => q~reg0.CLK
reset => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE
qbar <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|PointRegister:PR|DFlipFlop:U2
d => q~reg0.DATAIN
clk => q~reg0.CLK
reset => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE
qbar <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|PointRegister:PR|DFlipFlop:U3
d => q~reg0.DATAIN
clk => q~reg0.CLK
reset => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE
qbar <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|PointRegister:PR|DFlipFlop:U4
d => q~reg0.DATAIN
clk => q~reg0.CLK
reset => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE
qbar <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|DFlipFlop:LD
d => q~reg0.DATAIN
clk => q~reg0.CLK
reset => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE
qbar <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|CrapsGame|DFlipFlop:WD
d => q~reg0.DATAIN
clk => q~reg0.CLK
reset => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE
qbar <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


